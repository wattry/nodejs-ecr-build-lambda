---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template to build build and create a docker image repository, git repository.
Parameters:
  ProjectName:
    AllowedPattern: '[a-z0-9.-]*'
    ConstraintDescription: Project Name must contain only lowercase a-z, 0-9 and -
      characters.
    Default: codecommit-trigger-erc-build
    Description: Define the Name of the Project such as test/data etc. (Value must
      be comprised only of lowercase a-z, 0-9, .-)
    Type: String
  LambdaZipS3Bucket:
    Default: codecommit-ecr-build-pipeline
    Description: Define the Name of the S3 Bucket containing Lambda code zip
    Type: String
  LambdaZipS3Key:
    Default: lambda.zip
    Description: Define the Name of the S3 Bucket Key containing Lambda code zip
    Type: String
Resources:
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: !Sub ${ProjectName}-repo
      RepositoryName: !Sub ${ProjectName}-repo
      Triggers: 
        - Name: ImageBuildTrigger
          CustomData: !Sub 'Project ID ${ProjectName}'
          DestinationArn: !GetAtt  LambdaTrigger.Arn
          Branches: []
          Events:
          - all
  CodeBuildImageRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitReadOnly
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
            Version: '2012-10-17'
          PolicyName: !Sub
            - ${Param1}-RolePolicy
            - Param1: !Sub ${ProjectName}-CodeBuild-ContainerImage
      RoleName: !Sub ${ProjectName}-CodeBuild-Role
  CodeBuildImageJob:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildImageRole
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Description: CodeBuild Project to pull from a GIT repository containing
        a Dockerfile and a "buildspec.yml" file and build a docker image based off
        those artifacts.
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:18.09.0-1.7.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Name: !Sub '${ProjectName}-CodeBuild-Job'
      ServiceRole: !Sub ${ProjectName}-CodeBuild-Role
      Source:
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Phase INSTALL was STARTED on `date`
                - echo "Logging in to Amazon ECR..."
                - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=$BRANCH_NAME\_${COMMIT_HASH:=latest}
              finally:
                - echo Phase INSTALL was COMPLETED on `date`
                - if [ "$CODEBUILD_BUILD_SUCCEEDING" -eq 1 ]; then echo 'INSTALL SUCCESSFUL'; else echo 'INSTALL FAILED'; exit 1; fi
            build:
              commands:
                - echo Phase BUILD was STARTED on `date`
                - echo "Building the Docker image from " $APP_DIR
                - docker build -f $APP_DIR/Dockerfile -t $ECR_REPO_URI:latest .
              finally:
                - echo Phase BUILD was COMPLETED on `date`
                - if [ "$CODEBUILD_BUILD_SUCCEEDING" -eq 1 ]; then echo 'IMAGE BUILD SUCCESSFUL'; else echo 'IMAGE BUILD FAILED'; exit 1; fi
            post_build:
              commands:
                - echo Phase POST_BUILD was STARTED on `date`
                - echo "Pushing the Docker image to ECR..."
                - docker push $ECR_REPO_URI:latest
              finally:
                - echo Phase POST_BUILD was COMPLETED on `date`
                - if [ "$CODEBUILD_BUILD_SUCCEEDING" -eq 1 ]; then echo 'IMAGE POST BUILD SUCCESSFUL'; else echo 'IMAGE POST BUILD FAILED'; exit 1; fi
        Type: NO_SOURCE
      Tags:
        - Key: Project
          Value: !Ref 'ProjectName'
  LambdaTrigger:
    Type: AWS::Lambda::Function
    DependsOn: LambdaTriggerRole
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipS3Bucket'
        S3Key: !Ref 'LambdaZipS3Key'
      Description: Lambda function that will receive CodeCommit events and will trigger
        CodeBuild docker image build job.
      FunctionName: !Sub '${CodeBuildImageJob}-Lambda-Trigger'
      Handler: index.handler
      MemorySize: 512
      Role: !Sub
        - arn:aws:iam::${AWS::AccountId}:role/${Param1}
        - Param1: !Sub ${ProjectName}-Lambda-CodeBuild-Trigger-Role
      Runtime: nodejs12.x
      Tags:
        - Key: Project
          Value: !Ref 'ProjectName'
      Timeout: 300
      Environment:
        Variables:
          CODE_BUILD_PROJECT: !Ref CodeBuildImageJob
  LambdaTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
                Sid: LogAccessPolicy
              - Action:
                  - codecommit:GetTree
                  - codecommit:BatchGetCommits
                  - codecommit:GetCommit
                  - codecommit:GetCommitHistory
                  - codecommit:GetDifferences
                  - codecommit:GetReferences
                  - codecommit:GetObjectIdentifier
                  - codecommit:BatchGetCommits
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ProjectName}'
                Sid: CodeCommitRead
              - Action:
                  - ecr:DescribeRepositories
                  - ecr:CreateRepository
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:*'
                Sid: EcrReadWrite
              - Action:
                  - codebuild:StartBuild
                Effect: Allow
                Resource:
                  - !GetAtt CodeBuildImageJob.Arn
                Sid: CodeBuildStartPolicy
            Version: '2012-10-17'
          PolicyName: !Sub
            - ${Param1}-RolePolicy
            - Param1: !Sub ${ProjectName}-Lambda-CodeBuild-Trigger
      RoleName: !Sub ${ProjectName}-Lambda-CodeBuild-Trigger-Role
  PermissionForCodeCommitToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'LambdaTrigger'
      Principal: codecommit.amazonaws.com